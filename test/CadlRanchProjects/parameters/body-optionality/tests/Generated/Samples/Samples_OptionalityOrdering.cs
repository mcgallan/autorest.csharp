// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Parameters.BodyOptionality.Samples
{
    public partial class Samples_OptionalityOrdering
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalityOrdering_OrderingWithRequiredStart_ShortVersion()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            using RequestContent content = RequestContent.Create(new
            {
                start = "<start>",
            });
            Response response = client.OrderingWithRequiredStart(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OptionalityOrdering_OrderingWithRequiredStart_ShortVersion_Async()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            using RequestContent content = RequestContent.Create(new
            {
                start = "<start>",
            });
            Response response = await client.OrderingWithRequiredStartAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalityOrdering_OrderingWithRequiredStart_ShortVersion_Convenience()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            Response response = client.OrderingWithRequiredStart("<start>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OptionalityOrdering_OrderingWithRequiredStart_ShortVersion_Convenience_Async()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            Response response = await client.OrderingWithRequiredStartAsync("<start>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalityOrdering_OrderingWithRequiredStart_AllParameters()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            using RequestContent content = RequestContent.Create(new
            {
                start = "<start>",
                end = "<end>",
            });
            Response response = client.OrderingWithRequiredStart(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OptionalityOrdering_OrderingWithRequiredStart_AllParameters_Async()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            using RequestContent content = RequestContent.Create(new
            {
                start = "<start>",
                end = "<end>",
            });
            Response response = await client.OrderingWithRequiredStartAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalityOrdering_OrderingWithRequiredStart_AllParameters_Convenience()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            Response response = client.OrderingWithRequiredStart("<start>", end: "<end>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OptionalityOrdering_OrderingWithRequiredStart_AllParameters_Convenience_Async()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            Response response = await client.OrderingWithRequiredStartAsync("<start>", end: "<end>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalityOrdering_OrderingWithOptionalStart_ShortVersion()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            using RequestContent content = RequestContent.Create(new
            {
                end = "<end>",
            });
            Response response = client.OrderingWithOptionalStart(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OptionalityOrdering_OrderingWithOptionalStart_ShortVersion_Async()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            using RequestContent content = RequestContent.Create(new
            {
                end = "<end>",
            });
            Response response = await client.OrderingWithOptionalStartAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalityOrdering_OrderingWithOptionalStart_ShortVersion_Convenience()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            Response response = client.OrderingWithOptionalStart("<end>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OptionalityOrdering_OrderingWithOptionalStart_ShortVersion_Convenience_Async()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            Response response = await client.OrderingWithOptionalStartAsync("<end>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalityOrdering_OrderingWithOptionalStart_AllParameters()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            using RequestContent content = RequestContent.Create(new
            {
                start = "<start>",
                end = "<end>",
            });
            Response response = client.OrderingWithOptionalStart(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OptionalityOrdering_OrderingWithOptionalStart_AllParameters_Async()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            using RequestContent content = RequestContent.Create(new
            {
                start = "<start>",
                end = "<end>",
            });
            Response response = await client.OrderingWithOptionalStartAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_OptionalityOrdering_OrderingWithOptionalStart_AllParameters_Convenience()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            Response response = client.OrderingWithOptionalStart("<end>", start: "<start>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_OptionalityOrdering_OrderingWithOptionalStart_AllParameters_Convenience_Async()
        {
            OptionalityOrdering client = new BodyOptionalityClient().GetOptionalityOrderingClient();

            Response response = await client.OrderingWithOptionalStartAsync("<end>", start: "<start>");
        }
    }
}
