// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Routes
{
    // Data plane generated client.
    /// <summary> Define scenario in building the http route/uri. </summary>
    public partial class RoutesClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of RoutesClient. </summary>
        public RoutesClient() : this(new Uri("http://localhost:3000"), new RoutesClientOptions())
        {
        }

        /// <summary> Initializes a new instance of RoutesClient. </summary>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public RoutesClient(Uri endpoint, RoutesClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new RoutesClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Fixed.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/RoutesClient.xml" path="doc/members/member[@name='FixedAsync(RequestContext)']/*" />
        public virtual async Task<Response> FixedAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("RoutesClient.Fixed");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFixedRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Fixed.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/RoutesClient.xml" path="doc/members/member[@name='Fixed(RequestContext)']/*" />
        public virtual Response Fixed(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("RoutesClient.Fixed");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFixedRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private PathParameters _cachedPathParameters;
        private QueryParameters _cachedQueryParameters;
        private InInterface _cachedInInterface;

        /// <summary> Initializes a new instance of PathParameters. </summary>
        public virtual PathParameters GetPathParametersClient()
        {
            return Volatile.Read(ref _cachedPathParameters) ?? Interlocked.CompareExchange(ref _cachedPathParameters, new PathParameters(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedPathParameters;
        }

        /// <summary> Initializes a new instance of QueryParameters. </summary>
        public virtual QueryParameters GetQueryParametersClient()
        {
            return Volatile.Read(ref _cachedQueryParameters) ?? Interlocked.CompareExchange(ref _cachedQueryParameters, new QueryParameters(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedQueryParameters;
        }

        /// <summary> Initializes a new instance of InInterface. </summary>
        public virtual InInterface GetInInterfaceClient()
        {
            return Volatile.Read(ref _cachedInInterface) ?? Interlocked.CompareExchange(ref _cachedInInterface, new InInterface(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedInInterface;
        }

        internal HttpMessage CreateFixedRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/routes/fixed", false);
            request.Uri = uri;
            return message;
        }

        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
