// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Routes
{
    // Data plane generated sub-client.
    /// <summary> The PathParameters sub-client. </summary>
    public partial class PathParameters
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PathParameters for mocking. </summary>
        protected PathParameters()
        {
        }

        /// <summary> Initializes a new instance of PathParameters. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service host. </param>
        internal PathParameters(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _endpoint = endpoint;
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Template only.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"> The <see cref="string"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="param"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PathParameters.xml" path="doc/members/member[@name='TemplateOnlyAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> TemplateOnlyAsync(string param, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(param, nameof(param));

            using var scope = ClientDiagnostics.CreateScope("PathParameters.TemplateOnly");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTemplateOnlyRequest(param, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Template only.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"> The <see cref="string"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="param"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PathParameters.xml" path="doc/members/member[@name='TemplateOnly(string,RequestContext)']/*" />
        public virtual Response TemplateOnly(string param, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(param, nameof(param));

            using var scope = ClientDiagnostics.CreateScope("PathParameters.TemplateOnly");
            scope.Start();
            try
            {
                using HttpMessage message = CreateTemplateOnlyRequest(param, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Explicit.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"> The <see cref="string"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="param"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PathParameters.xml" path="doc/members/member[@name='ExplicitAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> ExplicitAsync(string param, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(param, nameof(param));

            using var scope = ClientDiagnostics.CreateScope("PathParameters.Explicit");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExplicitRequest(param, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Explicit.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"> The <see cref="string"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="param"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PathParameters.xml" path="doc/members/member[@name='Explicit(string,RequestContext)']/*" />
        public virtual Response Explicit(string param, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(param, nameof(param));

            using var scope = ClientDiagnostics.CreateScope("PathParameters.Explicit");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExplicitRequest(param, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Annotation only.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"> The <see cref="string"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="param"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PathParameters.xml" path="doc/members/member[@name='AnnotationOnlyAsync(string,RequestContext)']/*" />
        public virtual async Task<Response> AnnotationOnlyAsync(string param, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(param, nameof(param));

            using var scope = ClientDiagnostics.CreateScope("PathParameters.AnnotationOnly");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnnotationOnlyRequest(param, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Annotation only.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="param"> The <see cref="string"/> to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="param"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="param"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/PathParameters.xml" path="doc/members/member[@name='AnnotationOnly(string,RequestContext)']/*" />
        public virtual Response AnnotationOnly(string param, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(param, nameof(param));

            using var scope = ClientDiagnostics.CreateScope("PathParameters.AnnotationOnly");
            scope.Start();
            try
            {
                using HttpMessage message = CreateAnnotationOnlyRequest(param, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        private PathParametersReservedExpansion _cachedPathParametersReservedExpansion;
        private PathParametersSimpleExpansion _cachedPathParametersSimpleExpansion;
        private PathParametersPathExpansion _cachedPathParametersPathExpansion;
        private PathParametersLabelExpansion _cachedPathParametersLabelExpansion;
        private PathParametersMatrixExpansion _cachedPathParametersMatrixExpansion;

        /// <summary> Initializes a new instance of PathParametersReservedExpansion. </summary>
        public virtual PathParametersReservedExpansion GetPathParametersReservedExpansionClient()
        {
            return Volatile.Read(ref _cachedPathParametersReservedExpansion) ?? Interlocked.CompareExchange(ref _cachedPathParametersReservedExpansion, new PathParametersReservedExpansion(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedPathParametersReservedExpansion;
        }

        /// <summary> Initializes a new instance of PathParametersSimpleExpansion. </summary>
        public virtual PathParametersSimpleExpansion GetPathParametersSimpleExpansionClient()
        {
            return Volatile.Read(ref _cachedPathParametersSimpleExpansion) ?? Interlocked.CompareExchange(ref _cachedPathParametersSimpleExpansion, new PathParametersSimpleExpansion(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedPathParametersSimpleExpansion;
        }

        /// <summary> Initializes a new instance of PathParametersPathExpansion. </summary>
        public virtual PathParametersPathExpansion GetPathParametersPathExpansionClient()
        {
            return Volatile.Read(ref _cachedPathParametersPathExpansion) ?? Interlocked.CompareExchange(ref _cachedPathParametersPathExpansion, new PathParametersPathExpansion(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedPathParametersPathExpansion;
        }

        /// <summary> Initializes a new instance of PathParametersLabelExpansion. </summary>
        public virtual PathParametersLabelExpansion GetPathParametersLabelExpansionClient()
        {
            return Volatile.Read(ref _cachedPathParametersLabelExpansion) ?? Interlocked.CompareExchange(ref _cachedPathParametersLabelExpansion, new PathParametersLabelExpansion(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedPathParametersLabelExpansion;
        }

        /// <summary> Initializes a new instance of PathParametersMatrixExpansion. </summary>
        public virtual PathParametersMatrixExpansion GetPathParametersMatrixExpansionClient()
        {
            return Volatile.Read(ref _cachedPathParametersMatrixExpansion) ?? Interlocked.CompareExchange(ref _cachedPathParametersMatrixExpansion, new PathParametersMatrixExpansion(ClientDiagnostics, _pipeline, _endpoint), null) ?? _cachedPathParametersMatrixExpansion;
        }

        internal HttpMessage CreateTemplateOnlyRequest(string param, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/routes/path/template-only/", false);
            uri.AppendPath(param, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateExplicitRequest(string param, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/routes/path/explicit/", false);
            uri.AppendPath(param, true);
            request.Uri = uri;
            return message;
        }

        internal HttpMessage CreateAnnotationOnlyRequest(string param, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/routes/path/annotation-only/", false);
            uri.AppendPath(param, true);
            request.Uri = uri;
            return message;
        }

        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
