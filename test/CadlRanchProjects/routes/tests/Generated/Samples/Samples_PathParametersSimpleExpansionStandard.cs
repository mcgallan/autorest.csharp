// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;

namespace Routes.Samples
{
    public partial class Samples_PathParametersSimpleExpansionStandard
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Standard_Primitive_ShortVersion()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = client.Primitive("<param>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Standard_Primitive_ShortVersion_Async()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = await client.PrimitiveAsync("<param>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Standard_Primitive_AllParameters()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = client.Primitive("<param>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Standard_Primitive_AllParameters_Async()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = await client.PrimitiveAsync("<param>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Standard_Array_ShortVersion()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = client.Array(new string[] { "<param>" });

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Standard_Array_ShortVersion_Async()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = await client.ArrayAsync(new string[] { "<param>" });

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Standard_Array_AllParameters()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = client.Array(new string[] { "<param>" });

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Standard_Array_AllParameters_Async()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = await client.ArrayAsync(new string[] { "<param>" });

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Standard_Record_ShortVersion()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = client.Record(new Dictionary<string, int>
            {
                ["key"] = 1234
            });

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Standard_Record_ShortVersion_Async()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = await client.RecordAsync(new Dictionary<string, int>
            {
                ["key"] = 1234
            });

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Standard_Record_AllParameters()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = client.Record(new Dictionary<string, int>
            {
                ["key"] = 1234
            });

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Standard_Record_AllParameters_Async()
        {
            PathParametersSimpleExpansionStandard client = new RoutesClient().GetPathParametersClient().GetPathParametersSimpleExpansionClient().GetPathParametersSimpleExpansionStandardClient();

            Response response = await client.RecordAsync(new Dictionary<string, int>
            {
                ["key"] = 1234
            });

            Console.WriteLine(response.Status);
        }
    }
}
