// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;
using _Type.Property.Optionality.Models;

namespace _Type.Property.Optionality.Samples
{
    public partial class Samples_ReadOnlyStringRecord
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringRecord_GetDefault_ShortVersion()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response response = client.GetDefault(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringRecord_GetDefault_ShortVersion_Async()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response response = await client.GetDefaultAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringRecord_GetDefault_ShortVersion_Convenience()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response<ReadOnlyStringRecordProperty> response = client.GetDefault();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringRecord_GetDefault_ShortVersion_Convenience_Async()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response<ReadOnlyStringRecordProperty> response = await client.GetDefaultAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringRecord_GetDefault_AllParameters()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response response = client.GetDefault(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("property").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringRecord_GetDefault_AllParameters_Async()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response response = await client.GetDefaultAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("property").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringRecord_GetDefault_AllParameters_Convenience()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response<ReadOnlyStringRecordProperty> response = client.GetDefault();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringRecord_GetDefault_AllParameters_Convenience_Async()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response<ReadOnlyStringRecordProperty> response = await client.GetDefaultAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringRecord_GetAll_ShortVersion()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response response = client.GetAll(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringRecord_GetAll_ShortVersion_Async()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response response = await client.GetAllAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringRecord_GetAll_ShortVersion_Convenience()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response<ReadOnlyStringRecordProperty> response = client.GetAll();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringRecord_GetAll_ShortVersion_Convenience_Async()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response<ReadOnlyStringRecordProperty> response = await client.GetAllAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringRecord_GetAll_AllParameters()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response response = client.GetAll(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("property").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringRecord_GetAll_AllParameters_Async()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response response = await client.GetAllAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("property").GetProperty("<key>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringRecord_GetAll_AllParameters_Convenience()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response<ReadOnlyStringRecordProperty> response = client.GetAll();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringRecord_GetAll_AllParameters_Convenience_Async()
        {
            ReadOnlyStringRecord client = new OptionalClient().GetReadOnlyStringRecordClient();

            Response<ReadOnlyStringRecordProperty> response = await client.GetAllAsync();
        }
    }
}
