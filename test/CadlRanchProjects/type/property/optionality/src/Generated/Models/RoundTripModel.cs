// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace _Type.Property.Optionality.Models
{
    /// <summary> Model used both as input and output. </summary>
    public partial class RoundTripModel : BaseModel
    {
        /// <summary> Initializes a new instance of <see cref="RoundTripModel"/>. </summary>
        /// <param name="requiredString"> Required string, illustrating a reference type property. </param>
        /// <param name="requiredInt"> Required int, illustrating a value type property. </param>
        /// <param name="requiredNullableInt"> Required nullable int. </param>
        /// <param name="requiredNullableString"> Required nullable string. </param>
        /// <param name="requiredFixedStringEnum"> Required fixed string enum. </param>
        /// <param name="requiredFixedIntEnum"> Required fixed int enum. </param>
        /// <param name="requiredExtensibleEnum"> Required extensible enum. </param>
        /// <param name="requiredList"> Required collection. </param>
        /// <param name="requiredIntRecord"> Required int record. </param>
        /// <param name="requiredStringRecord"> Required string record. </param>
        /// <param name="requiredModelRecord"> Required Model Record. </param>
        /// <param name="requiredBytes"> Required bytes. </param>
        /// <param name="requiredUint8Array"> Required uint8[]. </param>
        /// <param name="requiredUnknown"> Required unknown. </param>
        /// <param name="requiredInt8Array"> Required int8[]. </param>
        /// <param name="requiredNullableIntList"> Required nullable int list. </param>
        /// <param name="requiredNullableStringList"> Required nullable string list. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="requiredString"/>, <paramref name="requiredList"/>, <paramref name="requiredIntRecord"/>, <paramref name="requiredStringRecord"/>, <paramref name="requiredModelRecord"/>, <paramref name="requiredBytes"/>, <paramref name="requiredUint8Array"/>, <paramref name="requiredUnknown"/> or <paramref name="requiredInt8Array"/> is null. </exception>
        internal RoundTripModel(string requiredString, int requiredInt, int? requiredNullableInt, string requiredNullableString, FixedStringEnum requiredFixedStringEnum, FixedIntEnum requiredFixedIntEnum, ExtensibleEnum requiredExtensibleEnum, IEnumerable<CollectionItem> requiredList, IReadOnlyDictionary<string, int> requiredIntRecord, IReadOnlyDictionary<string, string> requiredStringRecord, IReadOnlyDictionary<string, RecordItem> requiredModelRecord, BinaryData requiredBytes, IEnumerable<byte> requiredUint8Array, BinaryData requiredUnknown, IEnumerable<sbyte> requiredInt8Array, IEnumerable<int> requiredNullableIntList, IEnumerable<string> requiredNullableStringList)
        {
            Argument.AssertNotNull(requiredString, nameof(requiredString));
            Argument.AssertNotNull(requiredList, nameof(requiredList));
            Argument.AssertNotNull(requiredIntRecord, nameof(requiredIntRecord));
            Argument.AssertNotNull(requiredStringRecord, nameof(requiredStringRecord));
            Argument.AssertNotNull(requiredModelRecord, nameof(requiredModelRecord));
            Argument.AssertNotNull(requiredBytes, nameof(requiredBytes));
            Argument.AssertNotNull(requiredUint8Array, nameof(requiredUint8Array));
            Argument.AssertNotNull(requiredUnknown, nameof(requiredUnknown));
            Argument.AssertNotNull(requiredInt8Array, nameof(requiredInt8Array));

            RequiredString = requiredString;
            RequiredInt = requiredInt;
            RequiredNullableInt = requiredNullableInt;
            RequiredNullableString = requiredNullableString;
            RequiredFixedStringEnum = requiredFixedStringEnum;
            RequiredFixedIntEnum = requiredFixedIntEnum;
            RequiredExtensibleEnum = requiredExtensibleEnum;
            RequiredList = requiredList.ToList();
            RequiredIntRecord = requiredIntRecord;
            RequiredStringRecord = requiredStringRecord;
            RequiredModelRecord = requiredModelRecord;
            RequiredBytes = requiredBytes;
            RequiredUint8Array = requiredUint8Array.ToList();
            OptionalUint8Array = new ChangeTrackingList<byte>();
            RequiredUnknown = requiredUnknown;
            RequiredInt8Array = requiredInt8Array.ToList();
            OptionalInt8Array = new ChangeTrackingList<sbyte>();
            RequiredNullableIntList = requiredNullableIntList?.ToList();
            RequiredNullableStringList = requiredNullableStringList?.ToList();
            NonRequiredNullableIntList = new ChangeTrackingList<int>();
            NonRequiredNullableStringList = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripModel"/>. </summary>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="requiredString"> Required string, illustrating a reference type property. </param>
        /// <param name="requiredInt"> Required int, illustrating a value type property. </param>
        /// <param name="nonRequiredString"> Optional string. </param>
        /// <param name="nonRequiredInt"> Optional int. </param>
        /// <param name="requiredNullableInt"> Required nullable int. </param>
        /// <param name="requiredNullableString"> Required nullable string. </param>
        /// <param name="nonRequiredNullableInt"> Optional nullable int. </param>
        /// <param name="nonRequiredNullableString"> Optional nullable string. </param>
        /// <param name="requiredReadonlyInt"> Required readonly int. </param>
        /// <param name="nonRequiredReadonlyInt"> Optional readonly int. </param>
        /// <param name="requiredFixedStringEnum"> Required fixed string enum. </param>
        /// <param name="requiredFixedIntEnum"> Required fixed int enum. </param>
        /// <param name="requiredExtensibleEnum"> Required extensible enum. </param>
        /// <param name="requiredList"> Required collection. </param>
        /// <param name="requiredIntRecord"> Required int record. </param>
        /// <param name="requiredStringRecord"> Required string record. </param>
        /// <param name="requiredModelRecord"> Required Model Record. </param>
        /// <param name="requiredBytes"> Required bytes. </param>
        /// <param name="optionalBytes"> Optional bytes. </param>
        /// <param name="requiredUint8Array"> Required uint8[]. </param>
        /// <param name="optionalUint8Array"> Optional uint8[]. </param>
        /// <param name="requiredUnknown"> Required unknown. </param>
        /// <param name="optionalUnknown"> Optional unknown. </param>
        /// <param name="requiredInt8Array"> Required int8[]. </param>
        /// <param name="optionalInt8Array"> Optional int8[]. </param>
        /// <param name="requiredNullableIntList"> Required nullable int list. </param>
        /// <param name="requiredNullableStringList"> Required nullable string list. </param>
        /// <param name="nonRequiredNullableIntList"> Optional nullable model list. </param>
        /// <param name="nonRequiredNullableStringList"> Optional nullable string list. </param>
        internal RoundTripModel(IDictionary<string, BinaryData> serializedAdditionalRawData, string requiredString, int requiredInt, string nonRequiredString, int? nonRequiredInt, int? requiredNullableInt, string requiredNullableString, int? nonRequiredNullableInt, string nonRequiredNullableString, int requiredReadonlyInt, int? nonRequiredReadonlyInt, FixedStringEnum requiredFixedStringEnum, FixedIntEnum requiredFixedIntEnum, ExtensibleEnum requiredExtensibleEnum, IReadOnlyList<CollectionItem> requiredList, IReadOnlyDictionary<string, int> requiredIntRecord, IReadOnlyDictionary<string, string> requiredStringRecord, IReadOnlyDictionary<string, RecordItem> requiredModelRecord, BinaryData requiredBytes, BinaryData optionalBytes, IReadOnlyList<byte> requiredUint8Array, IReadOnlyList<byte> optionalUint8Array, BinaryData requiredUnknown, BinaryData optionalUnknown, IReadOnlyList<sbyte> requiredInt8Array, IReadOnlyList<sbyte> optionalInt8Array, IReadOnlyList<int> requiredNullableIntList, IReadOnlyList<string> requiredNullableStringList, IReadOnlyList<int> nonRequiredNullableIntList, IReadOnlyList<string> nonRequiredNullableStringList) : base(serializedAdditionalRawData)
        {
            RequiredString = requiredString;
            RequiredInt = requiredInt;
            NonRequiredString = nonRequiredString;
            NonRequiredInt = nonRequiredInt;
            RequiredNullableInt = requiredNullableInt;
            RequiredNullableString = requiredNullableString;
            NonRequiredNullableInt = nonRequiredNullableInt;
            NonRequiredNullableString = nonRequiredNullableString;
            RequiredReadonlyInt = requiredReadonlyInt;
            NonRequiredReadonlyInt = nonRequiredReadonlyInt;
            RequiredFixedStringEnum = requiredFixedStringEnum;
            RequiredFixedIntEnum = requiredFixedIntEnum;
            RequiredExtensibleEnum = requiredExtensibleEnum;
            RequiredList = requiredList;
            RequiredIntRecord = requiredIntRecord;
            RequiredStringRecord = requiredStringRecord;
            RequiredModelRecord = requiredModelRecord;
            RequiredBytes = requiredBytes;
            OptionalBytes = optionalBytes;
            RequiredUint8Array = requiredUint8Array;
            OptionalUint8Array = optionalUint8Array;
            RequiredUnknown = requiredUnknown;
            OptionalUnknown = optionalUnknown;
            RequiredInt8Array = requiredInt8Array;
            OptionalInt8Array = optionalInt8Array;
            RequiredNullableIntList = requiredNullableIntList;
            RequiredNullableStringList = requiredNullableStringList;
            NonRequiredNullableIntList = nonRequiredNullableIntList;
            NonRequiredNullableStringList = nonRequiredNullableStringList;
        }

        /// <summary> Initializes a new instance of <see cref="RoundTripModel"/> for deserialization. </summary>
        internal RoundTripModel()
        {
        }

        /// <summary> Required string, illustrating a reference type property. </summary>
        public string RequiredString { get; }
        /// <summary> Required int, illustrating a value type property. </summary>
        public int RequiredInt { get; }
        /// <summary> Optional string. </summary>
        public string NonRequiredString { get; }
        /// <summary> Optional int. </summary>
        public int? NonRequiredInt { get; }
        /// <summary> Required nullable int. </summary>
        public int? RequiredNullableInt { get; }
        /// <summary> Required nullable string. </summary>
        public string RequiredNullableString { get; }
        /// <summary> Optional nullable int. </summary>
        public int? NonRequiredNullableInt { get; }
        /// <summary> Optional nullable string. </summary>
        public string NonRequiredNullableString { get; }
        /// <summary> Required readonly int. </summary>
        public int RequiredReadonlyInt { get; }
        /// <summary> Optional readonly int. </summary>
        public int? NonRequiredReadonlyInt { get; }
        /// <summary> Required fixed string enum. </summary>
        public FixedStringEnum RequiredFixedStringEnum { get; }
        /// <summary> Required fixed int enum. </summary>
        public FixedIntEnum RequiredFixedIntEnum { get; }
        /// <summary> Required extensible enum. </summary>
        public ExtensibleEnum RequiredExtensibleEnum { get; }
        /// <summary> Required collection. </summary>
        public IReadOnlyList<CollectionItem> RequiredList { get; }
        /// <summary> Required int record. </summary>
        public IReadOnlyDictionary<string, int> RequiredIntRecord { get; }
        /// <summary> Required string record. </summary>
        public IReadOnlyDictionary<string, string> RequiredStringRecord { get; }
        /// <summary> Required Model Record. </summary>
        public IReadOnlyDictionary<string, RecordItem> RequiredModelRecord { get; }
        /// <summary>
        /// Required bytes
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromBytes(new byte[] { 1, 2, 3 })</term>
        /// <description>Creates a payload of "AQID".</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData RequiredBytes { get; }
        /// <summary>
        /// Optional bytes
        /// <para>
        /// To assign a byte[] to this property use <see cref="BinaryData.FromBytes(byte[])"/>.
        /// The byte[] will be serialized to a Base64 encoded string.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromBytes(new byte[] { 1, 2, 3 })</term>
        /// <description>Creates a payload of "AQID".</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData OptionalBytes { get; }
        /// <summary> Required uint8[]. </summary>
        public IReadOnlyList<byte> RequiredUint8Array { get; }
        /// <summary> Optional uint8[]. </summary>
        public IReadOnlyList<byte> OptionalUint8Array { get; }
        /// <summary>
        /// Required unknown
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData RequiredUnknown { get; }
        /// <summary>
        /// Optional unknown
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData OptionalUnknown { get; }
        /// <summary> Required int8[]. </summary>
        public IReadOnlyList<sbyte> RequiredInt8Array { get; }
        /// <summary> Optional int8[]. </summary>
        public IReadOnlyList<sbyte> OptionalInt8Array { get; }
        /// <summary> Required nullable int list. </summary>
        public IReadOnlyList<int> RequiredNullableIntList { get; }
        /// <summary> Required nullable string list. </summary>
        public IReadOnlyList<string> RequiredNullableStringList { get; }
        /// <summary> Optional nullable model list. </summary>
        public IReadOnlyList<int> NonRequiredNullableIntList { get; }
        /// <summary> Optional nullable string list. </summary>
        public IReadOnlyList<string> NonRequiredNullableStringList { get; }
    }
}
