// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace _Type.Property.Optionality.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class TypePropertyOptionalityModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ReadOnlyStringProperty"/>. </summary>
        /// <param name="property"> ReadOnlyProperty. </param>
        /// <returns> A new <see cref="Models.ReadOnlyStringProperty"/> instance for mocking. </returns>
        public static ReadOnlyStringProperty ReadOnlyStringProperty(string property = null)
        {
            return new ReadOnlyStringProperty(property, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReadOnlyIntProperty"/>. </summary>
        /// <param name="property"> ReadOnlyProperty. </param>
        /// <returns> A new <see cref="Models.ReadOnlyIntProperty"/> instance for mocking. </returns>
        public static ReadOnlyIntProperty ReadOnlyIntProperty(int? property = null)
        {
            return new ReadOnlyIntProperty(property, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReadOnlyModelProperty"/>. </summary>
        /// <param name="property"> ReadOnlyProperty. </param>
        /// <returns> A new <see cref="Models.ReadOnlyModelProperty"/> instance for mocking. </returns>
        public static ReadOnlyModelProperty ReadOnlyModelProperty(ReadOnlyInnerModel property = null)
        {
            return new ReadOnlyModelProperty(property, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReadOnlyInnerModel"/>. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.ReadOnlyInnerModel"/> instance for mocking. </returns>
        public static ReadOnlyInnerModel ReadOnlyInnerModel(string name = null)
        {
            return new ReadOnlyInnerModel(name, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReadOnlyStringListProperty"/>. </summary>
        /// <param name="property"> ReadOnlyProperty. </param>
        /// <returns> A new <see cref="Models.ReadOnlyStringListProperty"/> instance for mocking. </returns>
        public static ReadOnlyStringListProperty ReadOnlyStringListProperty(IEnumerable<string> property = null)
        {
            property ??= new List<string>();

            return new ReadOnlyStringListProperty(property?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReadOnlyStringRecordProperty"/>. </summary>
        /// <param name="property"> ReadOnlyProperty. </param>
        /// <returns> A new <see cref="Models.ReadOnlyStringRecordProperty"/> instance for mocking. </returns>
        public static ReadOnlyStringRecordProperty ReadOnlyStringRecordProperty(IReadOnlyDictionary<string, string> property = null)
        {
            property ??= new Dictionary<string, string>();

            return new ReadOnlyStringRecordProperty(property, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReadOnlyIntListProperty"/>. </summary>
        /// <param name="property"> ReadOnlyProperty. </param>
        /// <returns> A new <see cref="Models.ReadOnlyIntListProperty"/> instance for mocking. </returns>
        public static ReadOnlyIntListProperty ReadOnlyIntListProperty(IEnumerable<int> property = null)
        {
            property ??= new List<int>();

            return new ReadOnlyIntListProperty(property?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReadOnlyIntRecordProperty"/>. </summary>
        /// <param name="property"> ReadOnlyProperty. </param>
        /// <returns> A new <see cref="Models.ReadOnlyIntRecordProperty"/> instance for mocking. </returns>
        public static ReadOnlyIntRecordProperty ReadOnlyIntRecordProperty(IReadOnlyDictionary<string, int> property = null)
        {
            property ??= new Dictionary<string, int>();

            return new ReadOnlyIntRecordProperty(property, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReadOnlyModelListProperty"/>. </summary>
        /// <param name="property"> ReadOnlyProperty. </param>
        /// <returns> A new <see cref="Models.ReadOnlyModelListProperty"/> instance for mocking. </returns>
        public static ReadOnlyModelListProperty ReadOnlyModelListProperty(IEnumerable<ReadOnlyInnerModel> property = null)
        {
            property ??= new List<ReadOnlyInnerModel>();

            return new ReadOnlyModelListProperty(property?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ReadOnlyModelRecordProperty"/>. </summary>
        /// <param name="property"> ReadOnlyProperty. </param>
        /// <returns> A new <see cref="Models.ReadOnlyModelRecordProperty"/> instance for mocking. </returns>
        public static ReadOnlyModelRecordProperty ReadOnlyModelRecordProperty(IReadOnlyDictionary<string, ReadOnlyInnerModel> property = null)
        {
            property ??= new Dictionary<string, ReadOnlyInnerModel>();

            return new ReadOnlyModelRecordProperty(property, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RequiredReadOnlyModelRecordProperty"/>. </summary>
        /// <param name="property"> ReadOnlyProperty. </param>
        /// <returns> A new <see cref="Models.RequiredReadOnlyModelRecordProperty"/> instance for mocking. </returns>
        public static RequiredReadOnlyModelRecordProperty RequiredReadOnlyModelRecordProperty(IReadOnlyDictionary<string, ReadOnlyInnerModel> property = null)
        {
            property ??= new Dictionary<string, ReadOnlyInnerModel>();

            return new RequiredReadOnlyModelRecordProperty(property, serializedAdditionalRawData: null);
        }
    }
}
