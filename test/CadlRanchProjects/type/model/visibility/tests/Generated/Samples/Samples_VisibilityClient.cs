// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using _Type.Model.Visibility.Models;

namespace _Type.Model.Visibility.Samples
{
    public partial class Samples_VisibilityClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_GetModel_ShortVersion()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.GetModel(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("readProp").ToString());
            Console.WriteLine(result.GetProperty("queryProp").ToString());
            Console.WriteLine(result.GetProperty("createProp")[0].ToString());
            Console.WriteLine(result.GetProperty("updateProp")[0].ToString());
            Console.WriteLine(result.GetProperty("deleteProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_GetModel_ShortVersion_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.GetModelAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("readProp").ToString());
            Console.WriteLine(result.GetProperty("queryProp").ToString());
            Console.WriteLine(result.GetProperty("createProp")[0].ToString());
            Console.WriteLine(result.GetProperty("updateProp")[0].ToString());
            Console.WriteLine(result.GetProperty("deleteProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_GetModel_ShortVersion_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response<VisibilityModel> response = client.GetModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_GetModel_ShortVersion_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response<VisibilityModel> response = await client.GetModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_GetModel_AllParameters()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.GetModel(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("readProp").ToString());
            Console.WriteLine(result.GetProperty("queryProp").ToString());
            Console.WriteLine(result.GetProperty("createProp")[0].ToString());
            Console.WriteLine(result.GetProperty("updateProp")[0].ToString());
            Console.WriteLine(result.GetProperty("deleteProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_GetModel_AllParameters_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.GetModelAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("readProp").ToString());
            Console.WriteLine(result.GetProperty("queryProp").ToString());
            Console.WriteLine(result.GetProperty("createProp")[0].ToString());
            Console.WriteLine(result.GetProperty("updateProp")[0].ToString());
            Console.WriteLine(result.GetProperty("deleteProp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_GetModel_AllParameters_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response<VisibilityModel> response = client.GetModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_GetModel_AllParameters_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response<VisibilityModel> response = await client.GetModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_HeadModel_ShortVersion()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.HeadModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_HeadModel_ShortVersion_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.HeadModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_HeadModel_ShortVersion_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = client.HeadModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_HeadModel_ShortVersion_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = await client.HeadModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_HeadModel_AllParameters()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.HeadModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_HeadModel_AllParameters_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.HeadModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_HeadModel_AllParameters_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = client.HeadModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_HeadModel_AllParameters_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = await client.HeadModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_PutModel_ShortVersion()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.PutModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_PutModel_ShortVersion_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.PutModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_PutModel_ShortVersion_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = client.PutModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_PutModel_ShortVersion_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = await client.PutModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_PutModel_AllParameters()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.PutModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_PutModel_AllParameters_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.PutModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_PutModel_AllParameters_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = client.PutModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_PutModel_AllParameters_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = await client.PutModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_PatchModel_ShortVersion()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.PatchModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_PatchModel_ShortVersion_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.PatchModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_PatchModel_AllParameters()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.PatchModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_PatchModel_AllParameters_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.PatchModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_PostModel_ShortVersion()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.PostModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_PostModel_ShortVersion_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.PostModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_PostModel_ShortVersion_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = client.PostModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_PostModel_ShortVersion_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = await client.PostModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_PostModel_AllParameters()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.PostModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_PostModel_AllParameters_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.PostModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_PostModel_AllParameters_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = client.PostModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_PostModel_AllParameters_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = await client.PostModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_DeleteModel_ShortVersion()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.DeleteModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_DeleteModel_ShortVersion_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.DeleteModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_DeleteModel_ShortVersion_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = client.DeleteModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_DeleteModel_ShortVersion_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = await client.DeleteModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_DeleteModel_AllParameters()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = client.DeleteModel(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_DeleteModel_AllParameters_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                queryProp = 1234,
                createProp = new object[]
            {
"<createProp>"
            },
                updateProp = new object[]
            {
1234
            },
                deleteProp = true,
            });
            Response response = await client.DeleteModelAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_DeleteModel_AllParameters_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = client.DeleteModel(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_DeleteModel_AllParameters_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            VisibilityModel input = new VisibilityModel(1234, new string[] { "<createProp>" }, new int[] { 1234 }, true);
            Response response = await client.DeleteModelAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_InputToRoundTripReadOnly_ShortVersion()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = client.InputToRoundTripReadOnly(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredReadonlyString").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredReadOnlyIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalReadOnlyIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalReadOnlyStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableIntElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_InputToRoundTripReadOnly_ShortVersion_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = await client.InputToRoundTripReadOnlyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredReadonlyString").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredReadOnlyIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalReadOnlyIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalReadOnlyStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableIntElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_InputToRoundTripReadOnly_ShortVersion_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            InputModel input = new InputModel(
                "<requiredString>",
                1234,
                1234,
                "<requiredNullableString>",
                new BaseModel(),
                default,
                new int[] { 1234 },
                new string[] { "<requiredStringList>" },
                new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            },
                new Dictionary<string, RecordItem>
                {
                    ["key"] = default
                },
                new float?[] { 123.45F },
                new bool?[] { true },
                new CollectionItem[]
            {
default
            },
                new string[] { "<requiredNullableStringList>" },
                new int[] { 1234 });
            Response<RoundTripReadOnlyModel> response = client.InputToRoundTripReadOnly(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_InputToRoundTripReadOnly_ShortVersion_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            InputModel input = new InputModel(
                "<requiredString>",
                1234,
                1234,
                "<requiredNullableString>",
                new BaseModel(),
                default,
                new int[] { 1234 },
                new string[] { "<requiredStringList>" },
                new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            },
                new Dictionary<string, RecordItem>
                {
                    ["key"] = default
                },
                new float?[] { 123.45F },
                new bool?[] { true },
                new CollectionItem[]
            {
default
            },
                new string[] { "<requiredNullableStringList>" },
                new int[] { 1234 });
            Response<RoundTripReadOnlyModel> response = await client.InputToRoundTripReadOnlyAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_InputToRoundTripReadOnly_AllParameters()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
                nonRequiredModelList = new object[]
            {
null
            },
                nonRequiredStringList = new object[]
            {
"<nonRequiredStringList>"
            },
                nonRequiredIntList = new object[]
            {
1234
            },
                nonRequiredNullableModelList = new object[]
            {
null
            },
                nonRequiredNullableStringList = new object[]
            {
"<nonRequiredNullableStringList>"
            },
                nonRequiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = client.InputToRoundTripReadOnly(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredReadonlyString").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyString").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredReadOnlyIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalReadOnlyIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalReadOnlyStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableIntElement")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalCollectionWithNullableBooleanElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_InputToRoundTripReadOnly_AllParameters_Async()
        {
            VisibilityClient client = new VisibilityClient();

            using RequestContent content = RequestContent.Create(new
            {
                requiredString = "<requiredString>",
                requiredInt = 1234,
                requiredNullableInt = 1234,
                requiredNullableString = "<requiredNullableString>",
                nonRequiredNullableInt = 1234,
                nonRequiredNullableString = "<nonRequiredNullableString>",
                requiredModel = new object(),
                requiredIntList = new object[]
            {
1234
            },
                requiredStringList = new object[]
            {
"<requiredStringList>"
            },
                requiredModelList = new object[]
            {
new
{
requiredModelRecord = new
{
key = new
{
requiredList = new object[]
{
null
},
},
},
}
            },
                requiredModelRecord = new { },
                requiredCollectionWithNullableFloatElement = new object[]
            {
123.45F
            },
                requiredCollectionWithNullableBooleanElement = new object[]
            {
true
            },
                requiredNullableModelList = new object[]
            {
null
            },
                requiredNullableStringList = new object[]
            {
"<requiredNullableStringList>"
            },
                requiredNullableIntList = new object[]
            {
1234
            },
                nonRequiredModelList = new object[]
            {
null
            },
                nonRequiredStringList = new object[]
            {
"<nonRequiredStringList>"
            },
                nonRequiredIntList = new object[]
            {
1234
            },
                nonRequiredNullableModelList = new object[]
            {
null
            },
                nonRequiredNullableStringList = new object[]
            {
"<nonRequiredNullableStringList>"
            },
                nonRequiredNullableIntList = new object[]
            {
1234
            },
            });
            Response response = await client.InputToRoundTripReadOnlyAsync(content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("requiredReadonlyString").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyString").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyInt").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyFixedStringEnum").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyExtensibleEnum").ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredReadonlyIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("requiredReadOnlyIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyStringList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalReadonlyIntList")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalReadOnlyIntRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("optionalReadOnlyStringRecord").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("requiredCollectionWithNullableIntElement")[0].ToString());
            Console.WriteLine(result.GetProperty("optionalCollectionWithNullableBooleanElement")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Visibility_InputToRoundTripReadOnly_AllParameters_Convenience()
        {
            VisibilityClient client = new VisibilityClient();

            InputModel input = new InputModel(
                "<requiredString>",
                1234,
                1234,
                "<requiredNullableString>",
                new BaseModel(),
                default,
                new int[] { 1234 },
                new string[] { "<requiredStringList>" },
                new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            },
                new Dictionary<string, RecordItem>
                {
                    ["key"] = default
                },
                new float?[] { 123.45F },
                new bool?[] { true },
                new CollectionItem[]
            {
default
            },
                new string[] { "<requiredNullableStringList>" },
                new int[] { 1234 })
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList = { default },
                NonRequiredStringList = { "<nonRequiredStringList>" },
                NonRequiredIntList = { 1234 },
                NonRequiredNullableModelList = { default },
                NonRequiredNullableStringList = { "<nonRequiredNullableStringList>" },
                NonRequiredNullableIntList = { 1234 },
            };
            Response<RoundTripReadOnlyModel> response = client.InputToRoundTripReadOnly(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Visibility_InputToRoundTripReadOnly_AllParameters_Convenience_Async()
        {
            VisibilityClient client = new VisibilityClient();

            InputModel input = new InputModel(
                "<requiredString>",
                1234,
                1234,
                "<requiredNullableString>",
                new BaseModel(),
                default,
                new int[] { 1234 },
                new string[] { "<requiredStringList>" },
                new CollectionItem[]
            {
new CollectionItem(new Dictionary<string, RecordItem>
{
["key"] = new RecordItem(new CollectionItem[]
{
default
})
})
            },
                new Dictionary<string, RecordItem>
                {
                    ["key"] = default
                },
                new float?[] { 123.45F },
                new bool?[] { true },
                new CollectionItem[]
            {
default
            },
                new string[] { "<requiredNullableStringList>" },
                new int[] { 1234 })
            {
                NonRequiredNullableInt = 1234,
                NonRequiredNullableString = "<nonRequiredNullableString>",
                NonRequiredModelList = { default },
                NonRequiredStringList = { "<nonRequiredStringList>" },
                NonRequiredIntList = { 1234 },
                NonRequiredNullableModelList = { default },
                NonRequiredNullableStringList = { "<nonRequiredNullableStringList>" },
                NonRequiredNullableIntList = { 1234 },
            };
            Response<RoundTripReadOnlyModel> response = await client.InputToRoundTripReadOnlyAsync(input);
        }
    }
}
