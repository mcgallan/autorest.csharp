// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace _Type.Model.Visibility.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class TypeModelVisibilityModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.VisibilityModel"/>. </summary>
        /// <param name="readProp"> Required string, illustrating a readonly property. </param>
        /// <param name="queryProp"> Required int32, illustrating a query property. </param>
        /// <param name="createProp"> Required string[], illustrating a create property. </param>
        /// <param name="updateProp"> Required int32[], illustrating a update property. </param>
        /// <param name="deleteProp"> Required bool, illustrating a delete property. </param>
        /// <returns> A new <see cref="Models.VisibilityModel"/> instance for mocking. </returns>
        public static VisibilityModel VisibilityModel(string readProp = null, int queryProp = default, IEnumerable<string> createProp = null, IEnumerable<int> updateProp = null, bool deleteProp = default)
        {
            createProp ??= new List<string>();
            updateProp ??= new List<int>();

            return new VisibilityModel(
                readProp,
                queryProp,
                createProp?.ToList(),
                updateProp?.ToList(),
                deleteProp,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InputModel"/>. </summary>
        /// <param name="requiredString"> Required string. </param>
        /// <param name="requiredInt"> Required int. </param>
        /// <param name="requiredNullableInt"> Required nullable int. </param>
        /// <param name="requiredNullableString"> Required nullable string. </param>
        /// <param name="nonRequiredNullableInt"> Optional nullable int. </param>
        /// <param name="nonRequiredNullableString"> Optional nullable string. </param>
        /// <param name="requiredModel"> Required model. </param>
        /// <param name="requiredModel2"> Required model. </param>
        /// <param name="requiredIntList"> Required primitive value type collection. </param>
        /// <param name="requiredStringList"> Required primitive reference type collection. </param>
        /// <param name="requiredModelList"> Required model collection. </param>
        /// <param name="requiredModelRecord"> Required model record. </param>
        /// <param name="requiredCollectionWithNullableFloatElement"> Required collection of which the element is a nullable float. </param>
        /// <param name="requiredCollectionWithNullableBooleanElement"> Required collection of which the element is a nullable boolean. </param>
        /// <param name="requiredNullableModelList"> Required model nullable collection. </param>
        /// <param name="requiredNullableStringList"> Required string nullable collection. </param>
        /// <param name="requiredNullableIntList"> Required int nullable collection. </param>
        /// <param name="nonRequiredModelList"> Optional model collection. </param>
        /// <param name="nonRequiredStringList"> Optional string collection. </param>
        /// <param name="nonRequiredIntList"> Optional int collection. </param>
        /// <param name="nonRequiredNullableModelList"> Optional model nullable collection. </param>
        /// <param name="nonRequiredNullableStringList"> Optional string nullable collection. </param>
        /// <param name="nonRequiredNullableIntList"> Optional int nullable collection. </param>
        /// <returns> A new <see cref="Models.InputModel"/> instance for mocking. </returns>
        public static InputModel InputModel(string requiredString = null, int requiredInt = default, int? requiredNullableInt = null, string requiredNullableString = null, int? nonRequiredNullableInt = null, string nonRequiredNullableString = null, BaseModel requiredModel = null, BaseModel requiredModel2 = null, IEnumerable<int> requiredIntList = null, IEnumerable<string> requiredStringList = null, IEnumerable<CollectionItem> requiredModelList = null, IDictionary<string, RecordItem> requiredModelRecord = null, IEnumerable<float?> requiredCollectionWithNullableFloatElement = null, IEnumerable<bool?> requiredCollectionWithNullableBooleanElement = null, IEnumerable<CollectionItem> requiredNullableModelList = null, IEnumerable<string> requiredNullableStringList = null, IEnumerable<int> requiredNullableIntList = null, IEnumerable<CollectionItem> nonRequiredModelList = null, IEnumerable<string> nonRequiredStringList = null, IEnumerable<int> nonRequiredIntList = null, IEnumerable<CollectionItem> nonRequiredNullableModelList = null, IEnumerable<string> nonRequiredNullableStringList = null, IEnumerable<int> nonRequiredNullableIntList = null)
        {
            requiredIntList ??= new List<int>();
            requiredStringList ??= new List<string>();
            requiredModelList ??= new List<CollectionItem>();
            requiredModelRecord ??= new Dictionary<string, RecordItem>();
            requiredCollectionWithNullableFloatElement ??= new List<float?>();
            requiredCollectionWithNullableBooleanElement ??= new List<bool?>();
            requiredNullableModelList ??= new List<CollectionItem>();
            requiredNullableStringList ??= new List<string>();
            requiredNullableIntList ??= new List<int>();
            nonRequiredModelList ??= new List<CollectionItem>();
            nonRequiredStringList ??= new List<string>();
            nonRequiredIntList ??= new List<int>();
            nonRequiredNullableModelList ??= new List<CollectionItem>();
            nonRequiredNullableStringList ??= new List<string>();
            nonRequiredNullableIntList ??= new List<int>();

            return new InputModel(
                requiredString,
                requiredInt,
                requiredNullableInt,
                requiredNullableString,
                nonRequiredNullableInt,
                nonRequiredNullableString,
                requiredModel,
                requiredModel2,
                requiredIntList?.ToList(),
                requiredStringList?.ToList(),
                requiredModelList?.ToList(),
                requiredModelRecord,
                requiredCollectionWithNullableFloatElement?.ToList(),
                requiredCollectionWithNullableBooleanElement?.ToList(),
                requiredNullableModelList?.ToList(),
                requiredNullableStringList?.ToList(),
                requiredNullableIntList?.ToList(),
                nonRequiredModelList?.ToList(),
                nonRequiredStringList?.ToList(),
                nonRequiredIntList?.ToList(),
                nonRequiredNullableModelList?.ToList(),
                nonRequiredNullableStringList?.ToList(),
                nonRequiredNullableIntList?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RoundTripReadOnlyModel"/>. </summary>
        /// <param name="requiredReadonlyString"> Required string, illustrating a readonly reference type property. </param>
        /// <param name="requiredReadonlyInt"> Required int, illustrating a readonly value type property. </param>
        /// <param name="optionalReadonlyString"> Optional string, illustrating a readonly reference type property. </param>
        /// <param name="optionalReadonlyInt"> Optional int, illustrating a readonly value type property. </param>
        /// <param name="requiredReadonlyModel"> Required readonly model. </param>
        /// <param name="optionalReadonlyModel"> Optional readonly model. </param>
        /// <param name="requiredReadonlyFixedStringEnum"> Required readonly fixed string enum. </param>
        /// <param name="requiredReadonlyExtensibleEnum"> Required readonly extensible enum. </param>
        /// <param name="optionalReadonlyFixedStringEnum"> Optional readonly fixed string enum. </param>
        /// <param name="optionalReadonlyExtensibleEnum"> Optional readonly extensible enum. </param>
        /// <param name="requiredReadonlyStringList"> Required readonly string collection. </param>
        /// <param name="requiredReadonlyIntList"> Required readonly int collection. </param>
        /// <param name="requiredReadOnlyModelList"> Required model collection. </param>
        /// <param name="requiredReadOnlyIntRecord"> Required int record. </param>
        /// <param name="requiredStringRecord"> Required string record. </param>
        /// <param name="requiredReadOnlyModelRecord"> Required model record. </param>
        /// <param name="optionalReadonlyStringList"> Optional readonly string collection. </param>
        /// <param name="optionalReadonlyIntList"> Optional readonly int collection. </param>
        /// <param name="optionalReadOnlyModelList"> Optional model collection. </param>
        /// <param name="optionalReadOnlyIntRecord"> Optional int record. </param>
        /// <param name="optionalReadOnlyStringRecord"> Optional string record. </param>
        /// <param name="optionalModelRecord"> Optional model record. </param>
        /// <param name="requiredCollectionWithNullableIntElement"> Required collection of which the element is a nullable int. </param>
        /// <param name="optionalCollectionWithNullableBooleanElement"> Optional collection of which the element is a nullable boolean. </param>
        /// <returns> A new <see cref="Models.RoundTripReadOnlyModel"/> instance for mocking. </returns>
        public static RoundTripReadOnlyModel RoundTripReadOnlyModel(string requiredReadonlyString = null, int requiredReadonlyInt = default, string optionalReadonlyString = null, int? optionalReadonlyInt = null, DerivedModel requiredReadonlyModel = null, DerivedModel optionalReadonlyModel = null, FixedStringEnum requiredReadonlyFixedStringEnum = default, ExtensibleEnum requiredReadonlyExtensibleEnum = default, FixedStringEnum optionalReadonlyFixedStringEnum = default, ExtensibleEnum optionalReadonlyExtensibleEnum = default, IEnumerable<string> requiredReadonlyStringList = null, IEnumerable<int> requiredReadonlyIntList = null, IEnumerable<CollectionItem> requiredReadOnlyModelList = null, IReadOnlyDictionary<string, int> requiredReadOnlyIntRecord = null, IReadOnlyDictionary<string, string> requiredStringRecord = null, IReadOnlyDictionary<string, RecordItem> requiredReadOnlyModelRecord = null, IEnumerable<string> optionalReadonlyStringList = null, IEnumerable<int> optionalReadonlyIntList = null, IEnumerable<CollectionItem> optionalReadOnlyModelList = null, IReadOnlyDictionary<string, int> optionalReadOnlyIntRecord = null, IReadOnlyDictionary<string, string> optionalReadOnlyStringRecord = null, IReadOnlyDictionary<string, RecordItem> optionalModelRecord = null, IEnumerable<int?> requiredCollectionWithNullableIntElement = null, IEnumerable<bool?> optionalCollectionWithNullableBooleanElement = null)
        {
            requiredReadonlyStringList ??= new List<string>();
            requiredReadonlyIntList ??= new List<int>();
            requiredReadOnlyModelList ??= new List<CollectionItem>();
            requiredReadOnlyIntRecord ??= new Dictionary<string, int>();
            requiredStringRecord ??= new Dictionary<string, string>();
            requiredReadOnlyModelRecord ??= new Dictionary<string, RecordItem>();
            optionalReadonlyStringList ??= new List<string>();
            optionalReadonlyIntList ??= new List<int>();
            optionalReadOnlyModelList ??= new List<CollectionItem>();
            optionalReadOnlyIntRecord ??= new Dictionary<string, int>();
            optionalReadOnlyStringRecord ??= new Dictionary<string, string>();
            optionalModelRecord ??= new Dictionary<string, RecordItem>();
            requiredCollectionWithNullableIntElement ??= new List<int?>();
            optionalCollectionWithNullableBooleanElement ??= new List<bool?>();

            return new RoundTripReadOnlyModel(
                requiredReadonlyString,
                requiredReadonlyInt,
                optionalReadonlyString,
                optionalReadonlyInt,
                requiredReadonlyModel,
                optionalReadonlyModel,
                requiredReadonlyFixedStringEnum,
                requiredReadonlyExtensibleEnum,
                optionalReadonlyFixedStringEnum,
                optionalReadonlyExtensibleEnum,
                requiredReadonlyStringList?.ToList(),
                requiredReadonlyIntList?.ToList(),
                requiredReadOnlyModelList?.ToList(),
                requiredReadOnlyIntRecord,
                requiredStringRecord,
                requiredReadOnlyModelRecord,
                optionalReadonlyStringList?.ToList(),
                optionalReadonlyIntList?.ToList(),
                optionalReadOnlyModelList?.ToList(),
                optionalReadOnlyIntRecord,
                optionalReadOnlyStringRecord,
                optionalModelRecord,
                requiredCollectionWithNullableIntElement?.ToList(),
                optionalCollectionWithNullableBooleanElement?.ToList(),
                serializedAdditionalRawData: null);
        }
    }
}
