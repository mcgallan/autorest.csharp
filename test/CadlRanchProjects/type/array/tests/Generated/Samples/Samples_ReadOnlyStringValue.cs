// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;
using _Type._Array.Models;

namespace _Type._Array.Samples
{
    public partial class Samples_ReadOnlyStringValue
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringValue_GetReadOnlyStringValue_ShortVersion()
        {
            ReadOnlyStringValue client = new ArrayClient().GetReadOnlyStringValueClient();

            Response response = client.GetReadOnlyStringValue(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("property").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringValue_GetReadOnlyStringValue_ShortVersion_Async()
        {
            ReadOnlyStringValue client = new ArrayClient().GetReadOnlyStringValueClient();

            Response response = await client.GetReadOnlyStringValueAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("property").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringValue_GetReadOnlyStringValue_ShortVersion_Convenience()
        {
            ReadOnlyStringValue client = new ArrayClient().GetReadOnlyStringValueClient();

            Response<IReadOnlyList<RequiredReadOnlyStringProperty>> response = client.GetReadOnlyStringValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringValue_GetReadOnlyStringValue_ShortVersion_Convenience_Async()
        {
            ReadOnlyStringValue client = new ArrayClient().GetReadOnlyStringValueClient();

            Response<IReadOnlyList<RequiredReadOnlyStringProperty>> response = await client.GetReadOnlyStringValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringValue_GetReadOnlyStringValue_AllParameters()
        {
            ReadOnlyStringValue client = new ArrayClient().GetReadOnlyStringValueClient();

            Response response = client.GetReadOnlyStringValue(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("property").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringValue_GetReadOnlyStringValue_AllParameters_Async()
        {
            ReadOnlyStringValue client = new ArrayClient().GetReadOnlyStringValueClient();

            Response response = await client.GetReadOnlyStringValueAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("property").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyStringValue_GetReadOnlyStringValue_AllParameters_Convenience()
        {
            ReadOnlyStringValue client = new ArrayClient().GetReadOnlyStringValueClient();

            Response<IReadOnlyList<RequiredReadOnlyStringProperty>> response = client.GetReadOnlyStringValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyStringValue_GetReadOnlyStringValue_AllParameters_Convenience_Async()
        {
            ReadOnlyStringValue client = new ArrayClient().GetReadOnlyStringValueClient();

            Response<IReadOnlyList<RequiredReadOnlyStringProperty>> response = await client.GetReadOnlyStringValueAsync();
        }
    }
}
