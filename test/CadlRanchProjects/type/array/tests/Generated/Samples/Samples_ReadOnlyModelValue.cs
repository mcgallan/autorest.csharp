// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using NUnit.Framework;
using _Type._Array.Models;

namespace _Type._Array.Samples
{
    public partial class Samples_ReadOnlyModelValue
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyModelValue_GetReadOnlyModelValue_ShortVersion()
        {
            ReadOnlyModelValue client = new ArrayClient().GetReadOnlyModelValueClient();

            Response response = client.GetReadOnlyModelValue(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("property").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyModelValue_GetReadOnlyModelValue_ShortVersion_Async()
        {
            ReadOnlyModelValue client = new ArrayClient().GetReadOnlyModelValueClient();

            Response response = await client.GetReadOnlyModelValueAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("property").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyModelValue_GetReadOnlyModelValue_ShortVersion_Convenience()
        {
            ReadOnlyModelValue client = new ArrayClient().GetReadOnlyModelValueClient();

            Response<IReadOnlyList<RequiredReadOnlyModelProperty>> response = client.GetReadOnlyModelValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyModelValue_GetReadOnlyModelValue_ShortVersion_Convenience_Async()
        {
            ReadOnlyModelValue client = new ArrayClient().GetReadOnlyModelValueClient();

            Response<IReadOnlyList<RequiredReadOnlyModelProperty>> response = await client.GetReadOnlyModelValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyModelValue_GetReadOnlyModelValue_AllParameters()
        {
            ReadOnlyModelValue client = new ArrayClient().GetReadOnlyModelValueClient();

            Response response = client.GetReadOnlyModelValue(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("property").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyModelValue_GetReadOnlyModelValue_AllParameters_Async()
        {
            ReadOnlyModelValue client = new ArrayClient().GetReadOnlyModelValueClient();

            Response response = await client.GetReadOnlyModelValueAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("property").GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ReadOnlyModelValue_GetReadOnlyModelValue_AllParameters_Convenience()
        {
            ReadOnlyModelValue client = new ArrayClient().GetReadOnlyModelValueClient();

            Response<IReadOnlyList<RequiredReadOnlyModelProperty>> response = client.GetReadOnlyModelValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ReadOnlyModelValue_GetReadOnlyModelValue_AllParameters_Convenience_Async()
        {
            ReadOnlyModelValue client = new ArrayClient().GetReadOnlyModelValueClient();

            Response<IReadOnlyList<RequiredReadOnlyModelProperty>> response = await client.GetReadOnlyModelValueAsync();
        }
    }
}
