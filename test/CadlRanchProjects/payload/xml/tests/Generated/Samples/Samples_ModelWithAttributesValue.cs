// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;
using Payload.Xml.Models;

namespace Payload.Xml.Samples
{
    public partial class Samples_ModelWithAttributesValue
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelWithAttributesValue_GetModelWithAttributesValue_ShortVersion()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            Response response = client.GetModelWithAttributesValue(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id1").ToString());
            Console.WriteLine(result.GetProperty("id2").ToString());
            Console.WriteLine(result.GetProperty("enabled").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelWithAttributesValue_GetModelWithAttributesValue_ShortVersion_Async()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            Response response = await client.GetModelWithAttributesValueAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id1").ToString());
            Console.WriteLine(result.GetProperty("id2").ToString());
            Console.WriteLine(result.GetProperty("enabled").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelWithAttributesValue_GetModelWithAttributesValue_ShortVersion_Convenience()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            Response<ModelWithAttributes> response = client.GetModelWithAttributesValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelWithAttributesValue_GetModelWithAttributesValue_ShortVersion_Convenience_Async()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            Response<ModelWithAttributes> response = await client.GetModelWithAttributesValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelWithAttributesValue_GetModelWithAttributesValue_AllParameters()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            Response response = client.GetModelWithAttributesValue(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id1").ToString());
            Console.WriteLine(result.GetProperty("id2").ToString());
            Console.WriteLine(result.GetProperty("enabled").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelWithAttributesValue_GetModelWithAttributesValue_AllParameters_Async()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            Response response = await client.GetModelWithAttributesValueAsync(null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id1").ToString());
            Console.WriteLine(result.GetProperty("id2").ToString());
            Console.WriteLine(result.GetProperty("enabled").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelWithAttributesValue_GetModelWithAttributesValue_AllParameters_Convenience()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            Response<ModelWithAttributes> response = client.GetModelWithAttributesValue();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelWithAttributesValue_GetModelWithAttributesValue_AllParameters_Convenience_Async()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            Response<ModelWithAttributes> response = await client.GetModelWithAttributesValueAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelWithAttributesValue_Put_ShortVersion()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            using RequestContent content = RequestContent.Create(new
            {
                id1 = 1234,
                id2 = "<id2>",
                enabled = true,
            });
            Response response = client.Put(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelWithAttributesValue_Put_ShortVersion_Async()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            using RequestContent content = RequestContent.Create(new
            {
                id1 = 1234,
                id2 = "<id2>",
                enabled = true,
            });
            Response response = await client.PutAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelWithAttributesValue_Put_ShortVersion_Convenience()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            ModelWithAttributes input = new ModelWithAttributes(1234, "<id2>", true);
            Response response = client.Put(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelWithAttributesValue_Put_ShortVersion_Convenience_Async()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            ModelWithAttributes input = new ModelWithAttributes(1234, "<id2>", true);
            Response response = await client.PutAsync(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelWithAttributesValue_Put_AllParameters()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            using RequestContent content = RequestContent.Create(new
            {
                id1 = 1234,
                id2 = "<id2>",
                enabled = true,
            });
            Response response = client.Put(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelWithAttributesValue_Put_AllParameters_Async()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            using RequestContent content = RequestContent.Create(new
            {
                id1 = 1234,
                id2 = "<id2>",
                enabled = true,
            });
            Response response = await client.PutAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ModelWithAttributesValue_Put_AllParameters_Convenience()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            ModelWithAttributes input = new ModelWithAttributes(1234, "<id2>", true);
            Response response = client.Put(input);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ModelWithAttributesValue_Put_AllParameters_Convenience_Async()
        {
            ModelWithAttributesValue client = new XmlClient().GetModelWithAttributesValueClient();

            ModelWithAttributes input = new ModelWithAttributes(1234, "<id2>", true);
            Response response = await client.PutAsync(input);
        }
    }
}
