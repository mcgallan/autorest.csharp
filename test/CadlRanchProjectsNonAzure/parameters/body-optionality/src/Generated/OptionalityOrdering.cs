// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Threading.Tasks;
using Scm.Parameters.BodyOptionality.Models;

namespace Scm.Parameters.BodyOptionality
{
    // Data plane generated sub-client.
    /// <summary> The OptionalityOrdering sub-client. </summary>
    public partial class OptionalityOrdering
    {
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual ClientPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of OptionalityOrdering for mocking. </summary>
        protected OptionalityOrdering()
        {
        }

        /// <summary> Initializes a new instance of OptionalityOrdering. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> Service host. </param>
        internal OptionalityOrdering(ClientPipeline pipeline, Uri endpoint)
        {
            _pipeline = pipeline;
            _endpoint = endpoint;
        }

        /// <summary> Ordering with required start. </summary>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="start"/> is null. </exception>
        public virtual async Task<ClientResult> OrderingWithRequiredStartAsync(string start, string end = null)
        {
            Argument.AssertNotNull(start, nameof(start));

            OrderingWithRequiredStartRequest orderingWithRequiredStartRequest = new OrderingWithRequiredStartRequest(start, end, null);
            ClientResult result = await OrderingWithRequiredStartAsync(orderingWithRequiredStartRequest.ToBinaryContent(), null).ConfigureAwait(false);
            return result;
        }

        /// <summary> Ordering with required start. </summary>
        /// <param name="start"></param>
        /// <param name="end"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="start"/> is null. </exception>
        public virtual ClientResult OrderingWithRequiredStart(string start, string end = null)
        {
            Argument.AssertNotNull(start, nameof(start));

            OrderingWithRequiredStartRequest orderingWithRequiredStartRequest = new OrderingWithRequiredStartRequest(start, end, null);
            ClientResult result = OrderingWithRequiredStart(orderingWithRequiredStartRequest.ToBinaryContent(), null);
            return result;
        }

        /// <summary>
        /// [Protocol Method] Ordering with required start.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="OrderingWithRequiredStartAsync(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> OrderingWithRequiredStartAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateOrderingWithRequiredStartRequest(content, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Ordering with required start.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="OrderingWithRequiredStart(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult OrderingWithRequiredStart(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateOrderingWithRequiredStartRequest(content, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        /// <summary> Ordering with optional start. </summary>
        /// <param name="end"></param>
        /// <param name="start"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="end"/> is null. </exception>
        public virtual async Task<ClientResult> OrderingWithOptionalStartAsync(string end, string start = null)
        {
            Argument.AssertNotNull(end, nameof(end));

            OrderingWithOptionalStartRequest orderingWithOptionalStartRequest = new OrderingWithOptionalStartRequest(start, end, null);
            ClientResult result = await OrderingWithOptionalStartAsync(orderingWithOptionalStartRequest.ToBinaryContent(), null).ConfigureAwait(false);
            return result;
        }

        /// <summary> Ordering with optional start. </summary>
        /// <param name="end"></param>
        /// <param name="start"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="end"/> is null. </exception>
        public virtual ClientResult OrderingWithOptionalStart(string end, string start = null)
        {
            Argument.AssertNotNull(end, nameof(end));

            OrderingWithOptionalStartRequest orderingWithOptionalStartRequest = new OrderingWithOptionalStartRequest(start, end, null);
            ClientResult result = OrderingWithOptionalStart(orderingWithOptionalStartRequest.ToBinaryContent(), null);
            return result;
        }

        /// <summary>
        /// [Protocol Method] Ordering with optional start.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="OrderingWithOptionalStartAsync(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> OrderingWithOptionalStartAsync(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateOrderingWithOptionalStartRequest(content, options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Ordering with optional start.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="OrderingWithOptionalStart(string,string)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult OrderingWithOptionalStart(BinaryContent content, RequestOptions options = null)
        {
            Argument.AssertNotNull(content, nameof(content));

            using PipelineMessage message = CreateOrderingWithOptionalStartRequest(content, options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        internal PipelineMessage CreateOrderingWithRequiredStartRequest(BinaryContent content, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier204;
            var request = message.Request;
            request.Method = "HEAD";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/parameters/body-optionality/optional-ordering/startwithequired", false);
            request.Uri = uri.ToUri();
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateOrderingWithOptionalStartRequest(BinaryContent content, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier204;
            var request = message.Request;
            request.Method = "HEAD";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/parameters/body-optionality/optional-ordering/startwithoptional", false);
            request.Uri = uri.ToUri();
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        private static PipelineMessageClassifier _pipelineMessageClassifier204;
        private static PipelineMessageClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 ??= PipelineMessageClassifier.Create(stackalloc ushort[] { 204 });
    }
}
