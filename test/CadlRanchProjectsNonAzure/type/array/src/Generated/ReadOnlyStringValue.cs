// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Scm._Type._Array.Models;

namespace Scm._Type._Array
{
    // Data plane generated sub-client.
    /// <summary> The ReadOnlyStringValue sub-client. </summary>
    public partial class ReadOnlyStringValue
    {
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual ClientPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ReadOnlyStringValue for mocking. </summary>
        protected ReadOnlyStringValue()
        {
        }

        /// <summary> Initializes a new instance of ReadOnlyStringValue. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> TestServer endpoint. </param>
        internal ReadOnlyStringValue(ClientPipeline pipeline, Uri endpoint)
        {
            _pipeline = pipeline;
            _endpoint = endpoint;
        }

        /// <summary> Get. </summary>
        public virtual async Task<ClientResult<IReadOnlyList<RequiredReadOnlyStringProperty>>> GetReadOnlyStringValueAsync()
        {
            ClientResult result = await GetReadOnlyStringValueAsync(null).ConfigureAwait(false);
            IReadOnlyList<RequiredReadOnlyStringProperty> value = default;
            using var document = await JsonDocument.ParseAsync(result.GetRawResponse().ContentStream, default, default).ConfigureAwait(false);
            List<RequiredReadOnlyStringProperty> array = new List<RequiredReadOnlyStringProperty>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(RequiredReadOnlyStringProperty.DeserializeRequiredReadOnlyStringProperty(item));
            }
            value = array;
            return ClientResult.FromValue(value, result.GetRawResponse());
        }

        /// <summary> Get. </summary>
        public virtual ClientResult<IReadOnlyList<RequiredReadOnlyStringProperty>> GetReadOnlyStringValue()
        {
            ClientResult result = GetReadOnlyStringValue(null);
            IReadOnlyList<RequiredReadOnlyStringProperty> value = default;
            using var document = JsonDocument.Parse(result.GetRawResponse().ContentStream);
            List<RequiredReadOnlyStringProperty> array = new List<RequiredReadOnlyStringProperty>();
            foreach (var item in document.RootElement.EnumerateArray())
            {
                array.Add(RequiredReadOnlyStringProperty.DeserializeRequiredReadOnlyStringProperty(item));
            }
            value = array;
            return ClientResult.FromValue(value, result.GetRawResponse());
        }

        /// <summary>
        /// [Protocol Method] Get.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetReadOnlyStringValueAsync()"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<ClientResult> GetReadOnlyStringValueAsync(RequestOptions options)
        {
            using PipelineMessage message = CreateGetReadOnlyStringValueRequest(options);
            return ClientResult.FromResponse(await _pipeline.ProcessMessageAsync(message, options).ConfigureAwait(false));
        }

        /// <summary>
        /// [Protocol Method] Get.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetReadOnlyStringValue()"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="options"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ClientResultException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual ClientResult GetReadOnlyStringValue(RequestOptions options)
        {
            using PipelineMessage message = CreateGetReadOnlyStringValueRequest(options);
            return ClientResult.FromResponse(_pipeline.ProcessMessage(message, options));
        }

        internal PipelineMessage CreateGetReadOnlyStringValueRequest(RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            var uri = new ClientUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/type/array/readonly-string", false);
            request.Uri = uri.ToUri();
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        private static PipelineMessageClassifier _pipelineMessageClassifier200;
        private static PipelineMessageClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 ??= PipelineMessageClassifier.Create(stackalloc ushort[] { 200 });
    }
}
