// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Scm._Type.Property.Optionality.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ScmTypePropertyOptionalityModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.InputModel"/>. </summary>
        /// <param name="requiredString"> Required string. </param>
        /// <param name="requiredInt"> Required int. </param>
        /// <param name="requiredNullableInt"> Required nullable int. </param>
        /// <param name="requiredNullableString"> Required nullable string. </param>
        /// <param name="nonRequiredNullableInt"> Optional nullable int. </param>
        /// <param name="nonRequiredNullableString"> Optional nullable string. </param>
        /// <param name="requiredModel"> Required model. </param>
        /// <param name="requiredModel2"> Required model. </param>
        /// <param name="requiredIntList"> Required primitive value type collection. </param>
        /// <param name="requiredStringList"> Required primitive reference type collection. </param>
        /// <param name="requiredModelList"> Required model collection. </param>
        /// <param name="requiredModelRecord"> Required model record. </param>
        /// <param name="requiredCollectionWithNullableFloatElement"> Required collection of which the element is a nullable float. </param>
        /// <param name="requiredCollectionWithNullableBooleanElement"> Required collection of which the element is a nullable boolean. </param>
        /// <param name="requiredNullableModelList"> Required model nullable collection. </param>
        /// <param name="requiredNullableStringList"> Required string nullable collection. </param>
        /// <param name="requiredNullableIntList"> Required int nullable collection. </param>
        /// <param name="nonRequiredModelList"> Optional model collection. </param>
        /// <param name="nonRequiredStringList"> Optional string collection. </param>
        /// <param name="nonRequiredIntList"> Optional int collection. </param>
        /// <param name="nonRequiredNullableModelList"> Optional model nullable collection. </param>
        /// <param name="nonRequiredNullableStringList"> Optional string nullable collection. </param>
        /// <param name="nonRequiredNullableIntList"> Optional int nullable collection. </param>
        /// <returns> A new <see cref="Models.InputModel"/> instance for mocking. </returns>
        public static InputModel InputModel(string requiredString = null, int requiredInt = default, int? requiredNullableInt = null, string requiredNullableString = null, int? nonRequiredNullableInt = null, string nonRequiredNullableString = null, BaseModel requiredModel = null, BaseModel requiredModel2 = null, IEnumerable<int> requiredIntList = null, IEnumerable<string> requiredStringList = null, IEnumerable<CollectionItem> requiredModelList = null, IDictionary<string, RecordItem> requiredModelRecord = null, IEnumerable<float?> requiredCollectionWithNullableFloatElement = null, IEnumerable<bool?> requiredCollectionWithNullableBooleanElement = null, IEnumerable<CollectionItem> requiredNullableModelList = null, IEnumerable<string> requiredNullableStringList = null, IEnumerable<int> requiredNullableIntList = null, IEnumerable<CollectionItem> nonRequiredModelList = null, IEnumerable<string> nonRequiredStringList = null, IEnumerable<int> nonRequiredIntList = null, IEnumerable<CollectionItem> nonRequiredNullableModelList = null, IEnumerable<string> nonRequiredNullableStringList = null, IEnumerable<int> nonRequiredNullableIntList = null)
        {
            requiredIntList ??= new List<int>();
            requiredStringList ??= new List<string>();
            requiredModelList ??= new List<CollectionItem>();
            requiredModelRecord ??= new Dictionary<string, RecordItem>();
            requiredCollectionWithNullableFloatElement ??= new List<float?>();
            requiredCollectionWithNullableBooleanElement ??= new List<bool?>();
            requiredNullableModelList ??= new List<CollectionItem>();
            requiredNullableStringList ??= new List<string>();
            requiredNullableIntList ??= new List<int>();
            nonRequiredModelList ??= new List<CollectionItem>();
            nonRequiredStringList ??= new List<string>();
            nonRequiredIntList ??= new List<int>();
            nonRequiredNullableModelList ??= new List<CollectionItem>();
            nonRequiredNullableStringList ??= new List<string>();
            nonRequiredNullableIntList ??= new List<int>();

            return new InputModel(
                requiredString,
                requiredInt,
                requiredNullableInt,
                requiredNullableString,
                nonRequiredNullableInt,
                nonRequiredNullableString,
                requiredModel,
                requiredModel2,
                requiredIntList?.ToList(),
                requiredStringList?.ToList(),
                requiredModelList?.ToList(),
                requiredModelRecord,
                requiredCollectionWithNullableFloatElement?.ToList(),
                requiredCollectionWithNullableBooleanElement?.ToList(),
                requiredNullableModelList?.ToList(),
                requiredNullableStringList?.ToList(),
                requiredNullableIntList?.ToList(),
                nonRequiredModelList?.ToList(),
                nonRequiredStringList?.ToList(),
                nonRequiredIntList?.ToList(),
                nonRequiredNullableModelList?.ToList(),
                nonRequiredNullableStringList?.ToList(),
                nonRequiredNullableIntList?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RoundTripModel"/>. </summary>
        /// <param name="requiredString"> Required string, illustrating a reference type property. </param>
        /// <param name="requiredInt"> Required int, illustrating a value type property. </param>
        /// <param name="nonRequiredString"> Optional string. </param>
        /// <param name="nonRequiredInt"> Optional int. </param>
        /// <param name="requiredNullableInt"> Required nullable int. </param>
        /// <param name="requiredNullableString"> Required nullable string. </param>
        /// <param name="nonRequiredNullableInt"> Optional nullable int. </param>
        /// <param name="nonRequiredNullableString"> Optional nullable string. </param>
        /// <param name="requiredReadonlyInt"> Required readonly int. </param>
        /// <param name="nonRequiredReadonlyInt"> Optional readonly int. </param>
        /// <param name="requiredFixedStringEnum"> Required fixed string enum. </param>
        /// <param name="requiredFixedIntEnum"> Required fixed int enum. </param>
        /// <param name="requiredExtensibleEnum"> Required extensible enum. </param>
        /// <param name="requiredList"> Required collection. </param>
        /// <param name="requiredIntRecord"> Required int record. </param>
        /// <param name="requiredStringRecord"> Required string record. </param>
        /// <param name="requiredModelRecord"> Required Model Record. </param>
        /// <param name="requiredBytes"> Required bytes. </param>
        /// <param name="optionalBytes"> Optional bytes. </param>
        /// <param name="requiredUint8Array"> Required uint8[]. </param>
        /// <param name="optionalUint8Array"> Optional uint8[]. </param>
        /// <param name="requiredUnknown"> Required unknown. </param>
        /// <param name="optionalUnknown"> Optional unknown. </param>
        /// <param name="requiredInt8Array"> Required int8[]. </param>
        /// <param name="optionalInt8Array"> Optional int8[]. </param>
        /// <param name="requiredNullableIntList"> Required nullable int list. </param>
        /// <param name="requiredNullableStringList"> Required nullable string list. </param>
        /// <param name="nonRequiredNullableIntList"> Optional nullable model list. </param>
        /// <param name="nonRequiredNullableStringList"> Optional nullable string list. </param>
        /// <returns> A new <see cref="Models.RoundTripModel"/> instance for mocking. </returns>
        public static RoundTripModel RoundTripModel(string requiredString = null, int requiredInt = default, string nonRequiredString = null, int? nonRequiredInt = null, int? requiredNullableInt = null, string requiredNullableString = null, int? nonRequiredNullableInt = null, string nonRequiredNullableString = null, int requiredReadonlyInt = default, int? nonRequiredReadonlyInt = null, FixedStringEnum requiredFixedStringEnum = default, FixedIntEnum requiredFixedIntEnum = default, ExtensibleEnum requiredExtensibleEnum = default, IEnumerable<CollectionItem> requiredList = null, IReadOnlyDictionary<string, int> requiredIntRecord = null, IReadOnlyDictionary<string, string> requiredStringRecord = null, IReadOnlyDictionary<string, RecordItem> requiredModelRecord = null, BinaryData requiredBytes = null, BinaryData optionalBytes = null, IEnumerable<byte> requiredUint8Array = null, IEnumerable<byte> optionalUint8Array = null, BinaryData requiredUnknown = null, BinaryData optionalUnknown = null, IEnumerable<sbyte> requiredInt8Array = null, IEnumerable<sbyte> optionalInt8Array = null, IEnumerable<int> requiredNullableIntList = null, IEnumerable<string> requiredNullableStringList = null, IEnumerable<int> nonRequiredNullableIntList = null, IEnumerable<string> nonRequiredNullableStringList = null)
        {
            requiredList ??= new List<CollectionItem>();
            requiredIntRecord ??= new Dictionary<string, int>();
            requiredStringRecord ??= new Dictionary<string, string>();
            requiredModelRecord ??= new Dictionary<string, RecordItem>();
            requiredUint8Array ??= new List<byte>();
            optionalUint8Array ??= new List<byte>();
            requiredInt8Array ??= new List<sbyte>();
            optionalInt8Array ??= new List<sbyte>();
            requiredNullableIntList ??= new List<int>();
            requiredNullableStringList ??= new List<string>();
            nonRequiredNullableIntList ??= new List<int>();
            nonRequiredNullableStringList ??= new List<string>();

            return new RoundTripModel(
                serializedAdditionalRawData: null,
                requiredString,
                requiredInt,
                nonRequiredString,
                nonRequiredInt,
                requiredNullableInt,
                requiredNullableString,
                nonRequiredNullableInt,
                nonRequiredNullableString,
                requiredReadonlyInt,
                nonRequiredReadonlyInt,
                requiredFixedStringEnum,
                requiredFixedIntEnum,
                requiredExtensibleEnum,
                requiredList?.ToList(),
                requiredIntRecord,
                requiredStringRecord,
                requiredModelRecord,
                requiredBytes,
                optionalBytes,
                requiredUint8Array?.ToList(),
                optionalUint8Array?.ToList(),
                requiredUnknown,
                optionalUnknown,
                requiredInt8Array?.ToList(),
                optionalInt8Array?.ToList(),
                requiredNullableIntList?.ToList(),
                requiredNullableStringList?.ToList(),
                nonRequiredNullableIntList?.ToList(),
                nonRequiredNullableStringList?.ToList());
        }
    }
}
